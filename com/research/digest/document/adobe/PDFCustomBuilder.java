/**
 * 
 */
package com.research.digest.document.adobe;

import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Properties;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

/**
 * @author cgordon
 *
 */

public class PDFCustomBuilder {

        public static void authorPdf(String filename, Properties meta, Properties preface, HashMap<String, Object> contents) {        	
                try {
                        Document document = new Document();
                        PdfWriter.getInstance(document, new FileOutputStream(filename));
                        document.open();
                        addMetaData(document, meta);
                        addTitlePage(document, preface);
                        addContent(document, contents);
                        document.close();
                } catch (Exception e) {
                        e.printStackTrace();
                }
        }

        private static void addMetaData(Document document, Properties details) {
        	
                document.addTitle(details.getProperty("TITLE"));
                document.addSubject(details.getProperty("SUBJECT"));
                document.addKeywords(details.getProperty("KEYWORDS"));
                document.addAuthor(details.getProperty("AUTHOR"));
                document.addCreator(details.getProperty("CREATOR"));
        }

        private static void addTitlePage(Document document, Properties details) throws DocumentException {
                Paragraph preface = new Paragraph();
                // We add one empty line
                addEmptyLine(preface, 1);
                preface.add(new Paragraph(details.getProperty("TITLE"), catFont));

                addEmptyLine(preface, 1);
                // Will create: Report generated by: _name, _date
                preface.add(new Paragraph("Report generated by: " + System.getProperty("user.name") + ", " + new Date(), smallBold));
                addEmptyLine(preface, 3);
                preface.add(new Paragraph(details.getProperty("DESCRIPTION"), smallBold));

                addEmptyLine(preface, 8);

                preface.add(new Paragraph(details.getProperty("PREFACE"), redFont));

                document.add(preface);
                document.newPage();
        }

        @SuppressWarnings("unchecked")
		private static void addContent(Document document, HashMap<String, Object> details) throws DocumentException {
                
                ArrayList<HashMap<String,Object>> sections = 
                		(ArrayList<HashMap<String, Object>>)details.get("SECTIONS");
                
                for(Object section : sections)
                {
                	
                    Anchor anchor = new Anchor((String)((HashMap<String, Object>)section).get("CHAPTER"), catFont);
                    anchor.setName((String)((HashMap<String, Object>)section).get("NAME"));

                    Chapter catPart = new Chapter(new Paragraph(anchor), 1);
                	
                    ArrayList<HashMap<String, Object>> paragraphs = (ArrayList<HashMap<String, Object>>)((HashMap<String, Object>)section).get("PARAGRAPHS");
                    
                    for(Object paragraph : paragraphs){
                    	
		                Paragraph subPara = new Paragraph((String)((HashMap<String, Object>)paragraph).get("SUBCATEGORY"), subFont);
		                Section subCatPart = catPart.addSection(subPara);
		                subCatPart.add(new Paragraph((String)((HashMap<String, Object>)paragraph).get("SUBCATEGORY")));
		
		                
		                HashMap<String, ArrayList<String>> list = (HashMap<String, ArrayList<String>>)((HashMap<String, Object>)paragraph).get("SUBCATEGORYLIST");
		                // add a list
		                createList(subCatPart, list);
		                
		                Paragraph paragrap = new Paragraph();
		                addEmptyLine(paragrap, 5);
		                subCatPart.add(paragrap);
		                
		                list = (HashMap<String, ArrayList<String>>)((HashMap<String, Object>)paragraph).get("SUBCATEGORYTABLE");
		
		                // add a table
		                createTable(subCatPart, list);
                	}    
	                // now add all this to the document
	                document.add(catPart);
                }

                Chapter closing = new Chapter(new Paragraph("-----THE END-----"), 100);
                // now add all this to the document
                document.add(closing);

        }

        private static void createTable(Section subCatPart,  HashMap<String, ArrayList<String>> details) throws BadElementException {
                PdfPTable table = new PdfPTable(3);

                ArrayList<String> headers = (ArrayList<String>)details.get("PHRASES");
                PdfPCell c1 = null;
                
                for(Object header : headers){
                	
                	c1 = new PdfPCell(new Phrase((String)header));
                    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(c1);                	
                }
                	
                table.setHeaderRows(1);
                ArrayList<String> cells = (ArrayList<String>)details.get("CELLS");
                
                for(Object cell : cells){
               	
                    table.addCell((String)cell);                	
                }
                subCatPart.add(table);
        }

        private static void createList(Section subCatPart, HashMap<String, ArrayList<String>> details) {
                List list = new List(true, false, 100);
                ArrayList<String> items = (ArrayList<String>)details.get("LIST");
                
                for(Object item : items){
                	
                	list.add(new ListItem((String)item));	
                }
                
                subCatPart.add(list);
        }

        private static void addEmptyLine(Paragraph paragraph, int number) {
                for (int i = 0; i < number; i++) {
                        paragraph.add(new Paragraph(" "));
                }
        }
        
		private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
		private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL, BaseColor.RED);
		private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16, Font.BOLD);
		private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
        
}
